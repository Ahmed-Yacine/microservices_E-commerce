version: "3.8"

services:
  nats:
    image: nats
    container_name: nats_container
    ports:
      - "4222:4222"
    networks:
      - microservices-network

  users-db:
    image: postgres
    container_name: users_postgres_db
    ports:
      - "5433:5432"
    environment:
      POSTGRES_PASSWORD: pass123
      POSTGRES_DB: users_db
    volumes:
      - users_postgres_data:/var/lib/postgresql/data
    networks:
      - microservices-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d postgres"]
      interval: 5s
      timeout: 5s
      retries: 5

  products-db:
    image: postgres
    container_name: products_postgres_db
    ports:
      - "5434:5432"
    environment:
      POSTGRES_PASSWORD: pass123
      POSTGRES_DB: products_db
    volumes:
      - products_postgres_data:/var/lib/postgresql/data
    networks:
      - microservices-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d postgres"]
      interval: 5s
      timeout: 5s
      retries: 5

  payments-db:
    image: postgres
    container_name: payments_postgres_db
    ports:
      - "5435:5432"
    environment:
      POSTGRES_PASSWORD: pass123
      POSTGRES_DB: payments_db
    volumes:
      - payments_postgres_data:/var/lib/postgresql/data
    networks:
      - microservices-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d postgres"]
      interval: 5s
      timeout: 5s
      retries: 5

  orders-db:
    image: postgres
    container_name: orders_postgres_db
    ports:
      - "5436:5432"
    environment:
      POSTGRES_PASSWORD: pass123
      POSTGRES_DB: orders_db
    volumes:
      - orders_postgres_data:/var/lib/postgresql/data
    networks:
      - microservices-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d postgres"]
      interval: 5s
      timeout: 5s
      retries: 5

  notifications-db:
    image: postgres
    container_name: notifications_postgres_db
    ports:
      - "5437:5432"
    environment:
      POSTGRES_PASSWORD: pass123
      POSTGRES_DB: notifications_db
    volumes:
      - notifications_postgres_data:/var/lib/postgresql/data
    networks:
      - microservices-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d postgres"]
      interval: 5s
      timeout: 5s
      retries: 5

  inventories-db:
    image: postgres
    container_name: inventories_postgres_db
    ports:
      - "5438:5432"
    environment:
      POSTGRES_PASSWORD: pass123
      POSTGRES_DB: inventories_db
    volumes:
      - inventories_postgres_data:/var/lib/postgresql/data
    networks:
      - microservices-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d postgres"]
      interval: 5s
      timeout: 5s
      retries: 5

  filesUpload-db:
    image: postgres
    container_name: filesUpload_postgres_db
    ports:
      - "5439:5432"
    environment:
      POSTGRES_PASSWORD: pass123
      POSTGRES_DB: filesUpload_db
    volumes:
      - filesUpload_postgres_data:/var/lib/postgresql/data
    networks:
      - microservices-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d postgres"]
      interval: 5s
      timeout: 5s
      retries: 5

  http-api-gateway:
    build:
      context: ./http-api-gateway
      dockerfile: Dockerfile
    container_name: http_api_gateway_container
    ports:
      - "3000:3000"
    volumes:
      - ./http-api-gateway:/app
      - /app/node_modules
    command: npm run start:dev
    env_file:
      - ./http-api-gateway/.env
    depends_on:
      - nats
      - products-microservice
      - users-microservice
    networks:
      - microservices-network

  users-microservice:
    build:
      context: ./users-microservice
      dockerfile: Dockerfile
    container_name: users_microservice_container
    volumes:
      - ./users-microservice:/app
      - /app/node_modules
    command: npm run start:dev
    env_file:
      - ./users-microservice/.env
    depends_on:
      - nats
      - users-db
    networks:
      - microservices-network

  products-microservice:
    build:
      context: ./products-microservice
      dockerfile: Dockerfile
    container_name: products_microservice_container
    volumes:
      - ./products-microservice:/app
      - /app/node_modules
    command: npm run start:dev
    env_file:
      - ./products-microservice/.env
    depends_on:
      - nats
      - products-db
    networks:
      - microservices-network

  payments-microservice:
    build:
      context: ./payments-microservice
      dockerfile: Dockerfile
    container_name: payments_microservice_container
    volumes:
      - ./payments-microservice:/app
      - /app/node_modules
    command: npm run start:dev
    env_file:
      - ./payments-microservice/.env
    depends_on:
      - nats
      - payments-db
    networks:
      - microservices-network

  orders-microservice:
    build:
      context: ./orders-microservice
      dockerfile: Dockerfile
    container_name: orders_microservice_container
    volumes:
      - ./orders-microservice:/app
      - /app/node_modules
    command: npm run start:dev
    env_file:
      - ./orders-microservice/.env
    depends_on:
      - nats
      - orders-db
    networks:
      - microservices-network

  notifications-microservice:
    build:
      context: ./notifications-microservice
      dockerfile: Dockerfile
    container_name: notifications_microservice_container
    volumes:
      - ./notifications-microservice:/app
      - /app/node_modules
    command: npm run start:dev
    env_file:
      - ./notifications-microservice/.env
    depends_on:
      - nats
      - notifications-db
    networks:
      - microservices-network

  inventory-microservice:
    build:
      context: ./inventory-microservice
      dockerfile: Dockerfile
    container_name: inventory_microservice_container
    volumes:
      - ./inventory-microservice:/app
      - /app/node_modules
    command: npm run start:dev
    env_file:
      - ./inventory-microservice/.env
    depends_on:
      - nats
      - inventories-db
    networks:
      - microservices-network

  files-upload-microservice:
    build:
      context: ./files-upload-microservice
      dockerfile: Dockerfile
    container_name: files-upload_microservice_container
    volumes:
      - ./files-upload-microservice:/app
      - /app/node_modules
    command: npm run start:dev
    env_file:
      - ./files-upload-microservice/.env
    depends_on:
      - nats
      - filesUpload-db
    networks:
      - microservices-network

  email-sms-microservice:
    build:
      context: ./email-sms-microservice
      dockerfile: Dockerfile
    container_name: email-sms-microservice_container
    volumes:
      - ./email-sms-microservice:/app
      - /app/node_modules
    command: npm run start:dev
    env_file:
      - ./email-sms-microservice/.env
    depends_on:
      - nats
    networks:
      - microservices-network

networks:
  microservices-network:
    driver: bridge
    driver_opts:
      com.docker.network.driver.mtu: 1450
  
volumes:
  users_postgres_data:
  products_postgres_data:
  payments_postgres_data:
  orders_postgres_data:
  notifications_postgres_data:
  inventories_postgres_data:
  filesUpload_postgres_data:
